// Copyright (c) 2022 AlertAvert.com.  All rights reserved.
// Created by M. Massenzio, 2022-03-13

syntax = "proto3";
package statemachine.v1;

import "google/protobuf/timestamp.proto";

// This is the Go import package; there is no correlation with the proto `import` above.
// See: https://developers.google.com/protocol-buffers/docs/reference/go-generated#package
option go_package = "github.com/massenz/statemachine/api";

// A state-machine Transition models the successful processing of an Event, and the
// FSM transitioning from the `from` state to the `to` state.
message Transition {
  string from = 1;
  string to = 2;
  string event = 3;
}

message Event {
  // A unique event ID, either user- or system-assigned; typically a UUID.
  string event_id = 1;

  // The time the event was received by the system; if not already set, it
  // will be system-assigned as the current time.
  google.protobuf.Timestamp timestamp = 2;

  // The FSM transition that this event refers to (when stored as a "historical" event);
  // when received by the system, it may simply represent the `event` that triggered the
  // Transition.
  Transition transition = 3;

  // The Sender of this event, if known; it can be a URI or just an ID, the semantics of
  // this field are left vague by design, the meaning of the `sender` string will be
  // dependant on the type of Event sent, and the target StateMachine.
  string originator = 4;
}

message Configuration {
  // A Configuration is uniquely identified by its `Name` and `Version`
  // Configurations are immutable and should never be modified without
  // also changing the version.
  string name = 4;

  // A version must be unique for a `Configuration`; if missing, a default `v1` is assigned
  string version = 5;

  // A list of all the state the FSM may transition through.
  // A 'final' state is identified by the one state (if any) that
  // does not have any transition with the state as the `from`.
  repeated string states = 1;

  repeated Transition transitions = 2;

  // The initial `state` for the FSM, and the one it returns to if
  // it is `restart()`ed.
  string starting_state = 3;
}

message FiniteStateMachine {

  // A config_id is the unique identifier for the `Configuration`, composed of the
  // name and version, separated by a colon (`:`), e.g., "my_config/stable:v1.0"
  string config_id = 1;

  // The current state for this FSM
  string state = 2;

  // An ordered sequence of Events, recording all FSM transitions.
  repeated Event history = 3;
}

message EventRequest {
  Event event = 1;
  string dest = 2;
}

message EventResponse {
  string event_id = 1;
}

message GetRequest {
  string id = 1;
}

message PutResponse {
  string id = 1;
  Configuration config = 2;
  FiniteStateMachine fsm = 3;
}

service StatemachineService {
  rpc GetConfiguration(GetRequest) returns (Configuration);
  rpc PutConfiguration(Configuration) returns (PutResponse);

  rpc GetFiniteStateMachine(GetRequest) returns (FiniteStateMachine);
  rpc PutFiniteStateMachine(FiniteStateMachine) returns (PutResponse);

  rpc ConsumeEvent(EventRequest) returns (EventResponse) {}
}
