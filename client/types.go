/*
 * Copyright (c) 2023 AlertAvert.com.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author: Marco Massenzio (marco@alertavert.com)
 */

package main

import (
	protos "github.com/massenz/statemachine-proto/golang/api"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

const (
	Version = "v1alpha"

	KindConfiguration      = "Configuration"
	KindFiniteStateMachine = "FiniteStateMachine"
	KindEvent              = "EventRequest"

	CmdSend = "send"
	CmdGet  = "get"
)

// A GenericEntity is the "wrapper" type that is sent to the CLI and wraps the entity
// (defined in the Spec) which will be sent to the FSM Server.
// It has an optional Id for those requests that need it (typically, when storing a new
// FSM or sending an Event); if unset, a new random UUID will be generated by the server.
type GenericEntity struct {
	Version string `yaml:"apiVersion"`
	Kind    string `yaml:"kind"`
	Id      string `yaml:"id"`
}

type ConfigEntity struct {
	GenericEntity
	Spec *protos.Configuration `yaml:"spec"`
}

type FsmEntity struct {
	GenericEntity
	Spec *protos.FiniteStateMachine `yaml:"spec"`
}

type EventRequestEntity struct {
	GenericEntity
	Spec *protos.EventRequest `yaml:"spec"`
}

func getStatusCode(response interface{}) codes.Code {
	// Get the gRPC status from the response
	s, ok := status.FromError(response.(error))
	if !ok {
		return codes.Unknown
	}
	// Return the status code
	return s.Code()
}
